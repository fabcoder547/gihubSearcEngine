{"version":3,"sources":["logo.svg","context/UserContext.js","Components/usercard.js","Components/Repos.js","Pages/Home.js","Pages/SignIn.js","Pages/SignUp.js","Layout/footer.js","Pages/notFound.js","Layout/Navbar.js","App.js","config/firebaseconfig.js","serviceWorker.js","index.js"],"names":["module","exports","UserContext","createContext","Usercard","user","className","src","avatar_url","name","location","email","bio","followers","Repos","repo_url","useState","repos","setrepos","useEffect","Axios","get","then","res","data","catch","err","console","log","map","item","key","id","language","description","Home","gituser","setgitUser","query","setquery","useContext","to","type","placeholder","onChange","e","target","value","onClick","toast","message","repos_url","SignIn","context","setEmail","password","setpassword","onSubmit","preventDefault","firebase","auth","signInWithEmailAndPassword","setUser","uid","for","aria-describedby","SignUp","createUserWithEmailAndPassword","Footer","Notfound","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","Provider","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,+KCE9BC,G,MAAcC,2B,iBCqBZC,EArBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,yBAAKC,UAAU,iBACb,yBAAKC,IAAKF,EAAKG,aACf,yBAAKF,UAAU,aACb,yBAAKA,UAAU,2BACb,4BAAKD,EAAKI,OAEZ,yBAAKH,UAAU,gBAAgBD,EAAKK,UACpC,yBAAKJ,UAAU,gBAAf,UACUD,EAAKM,MAAQN,EAAKM,MAAQ,IAEpC,yBAAKL,UAAU,aAAaD,EAAKO,KACjC,yBAAKN,UAAU,aAAf,cACcD,EAAKQ,UAAYR,EAAKQ,UAAY,OCqBzCC,EAhCD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACJC,mBAAS,IADL,mBACvBC,EADuB,KAChBC,EADgB,KAiB9B,OAHAC,qBAAU,WAVRC,IAAMC,IAAIN,GACPO,MAAK,SAACC,GAAS,IACNC,EAASD,EAATC,KACRN,EAASM,MAEVC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAMf,CAACX,IAEF,4BACGE,EAAMY,KAAI,SAACC,GAAD,OACT,wBAAIC,IAAKD,EAAKE,IACZ,yBAAK1B,UAAU,IACb,4BAAKwB,EAAKrB,OAEZ,yBAAKH,UAAU,QAAQwB,EAAKG,UAC5B,yBAAK3B,UAAU,QAAQwB,EAAKI,mBC0BvBC,EAhDF,WAAO,IAAD,EACanB,mBAAS,MADtB,mBACVoB,EADU,KACDC,EADC,OAESrB,mBAAS,IAFlB,mBAEVsB,EAFU,KAEHC,EAFG,KAgBjB,OAAqB,OAbLC,qBAAWtC,GAafG,KACH,kBAAC,IAAD,CAAUoC,GAAG,YAGlB,yBAAKnC,UAAU,OACb,yBAAKA,UAAU,oBACb,6BACE,2BACEoC,KAAK,OACLpC,UAAU,YACVqC,YAAY,oBACZC,SAAU,SAACC,GACTN,EAASM,EAAEC,OAAOC,UAGtB,6BACA,4BAAQzC,UAAU,kBAAkB0C,QA5BzB,WACnB5B,IAAMC,IAAN,uCAA0CiB,IACvChB,MAAK,YAAe,IAAZE,EAAW,EAAXA,KACPG,QAAQC,IAAIJ,GACZa,EAAWb,MAEZC,OAAM,SAACC,GACNuB,YAAMvB,EAAIwB,QAAS,CACjBR,KAAM,eAoBJ,eAIF,yBAAKpC,UAAU,WACA,OAAZ8B,EAAmB,kBAAC,EAAD,CAAU/B,KAAM+B,IAAc,SAGtD,yBAAK9B,UAAU,oBACZ8B,EAAU,kBAAC,EAAD,CAAOrB,SAAUqB,EAAQe,YAAgB,qBCmB/CC,EA9DA,WAAO,IAAD,EACbC,EAAUb,qBAAWtC,GADR,EAEOc,mBAAS,IAFhB,mBAEZL,EAFY,KAEL2C,EAFK,OAGatC,mBAAS,IAHtB,mBAGZuC,EAHY,KAGFC,EAHE,KA0BnB,iBAAIH,EAAQhD,YAAZ,aAAI,EAAcM,OACT,kBAAC,IAAD,CAAU8B,GAAG,MAGlB,0BAAMgB,SARW,SAACZ,GACpBA,EAAEa,iBAjBFC,IACGC,OACAC,2BAA2BlD,EAAO4C,GAClCjC,MAAK,SAACC,GACL8B,EAAQS,QAAQ,CACdnD,MAAOY,EAAIlB,KAAKM,MAChBoD,IAAKxC,EAAIlB,KAAK0D,SAGjBtC,OAAM,SAACC,GACNuB,YAAMvB,EAAIwB,QAAS,CACjBR,KAAM,eAcR,yBAAKpC,UAAU,cACb,2BAAO0D,IAAI,sBAAX,iBACA,2BACEtB,KAAK,QACLpC,UAAU,eACV0B,GAAG,qBACHiC,mBAAiB,YACjBrB,SAAU,SAACC,GACTS,EAAST,EAAEC,OAAOC,WAIxB,yBAAKzC,UAAU,cACb,2BAAO0D,IAAI,yBAAX,YACA,2BACEtB,KAAK,WACLpC,UAAU,eACV0B,GAAG,wBACHY,SAAU,SAACC,GACTW,EAAYX,EAAEC,OAAOC,WAI3B,4BAAQL,KAAK,SAASpC,UAAU,mBAAhC,aCcO4D,EAlEA,WAAO,IAAD,EACbb,EAAUb,qBAAWtC,GADR,EAGOc,mBAAS,IAHhB,mBAGZL,EAHY,KAGL2C,EAHK,OAIatC,mBAAS,IAJtB,mBAIZuC,EAJY,KAIFC,EAJE,KA8BnB,iBAAIH,EAAQhD,YAAZ,aAAI,EAAcM,OACT,kBAAC,IAAD,CAAU8B,GAAG,MAGlB,0BAAMgB,SATW,SAACZ,GACpBA,EAAEa,iBAnBFC,IACGC,OACAO,+BAA+BxD,EAAO4C,GACtCjC,MAAK,SAACC,GACLI,QAAQC,IAAIL,GACZ8B,EAAQS,QAAQ,CACdnD,MAAOY,EAAIlB,KAAKM,MAChBoD,IAAKxC,EAAIlB,KAAK0D,SAGjBtC,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZuB,YAAMvB,EAAK,CACTgB,KAAM,eAeR,yBAAKpC,UAAU,cACb,2BAAO0D,IAAI,sBAAX,iBACA,2BACEtB,KAAK,QACLpC,UAAU,eACV0B,GAAG,qBACHiC,mBAAiB,YACjBrB,SAAU,SAACC,GACTS,EAAST,EAAEC,OAAOC,WAIxB,yBAAKzC,UAAU,cACb,2BAAO0D,IAAI,yBAAX,YACA,2BACEtB,KAAK,WACLpC,UAAU,eACV0B,GAAG,wBACHY,SAAU,SAACC,GACTW,EAAYX,EAAEC,OAAOC,WAI3B,4BAAQL,KAAK,SAASpC,UAAU,mBAAhC,YCtDO8D,EAVA,WACb,OACE,yBACE9D,UAAU,mDACV0B,GAAG,UAEH,+DCESqC,EARE,WACf,OACE,6BACE,+CC0DSC,EA1DA,WAAO,IAAD,IACbjB,EAAUb,qBAAWtC,GAE3B,OACE,6BACE,yBAAKI,UAAU,+DACb,uBAAGA,UAAU,eAAeiE,KAAK,KAAjC,UAIA,4BACEjE,UAAU,iBACVoC,KAAK,SACL8B,cAAY,WACZC,cAAY,0BACZC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,sBAGb,yBAAKtE,UAAU,2BAA2B0B,GAAG,0BAC3C,0BAAM1B,UAAU,gBAAhB,YACW,UAAA+C,EAAQhD,YAAR,eAAcM,OAAd,UAAsB0C,EAAQhD,YAA9B,aAAsB,EAAcM,MAAQ,IAEvD,wBAAIL,UAAU,uBACX+C,EAAQhD,KACP,wBAAIC,UAAU,YACZ,uBACEiE,KAAK,IACLvB,QAAS,WACPK,EAAQS,QAAQ,OAElBxD,UAAU,YALZ,WAWF,oCACE,wBAAIA,UAAU,cACZ,uBAAGA,UAAU,WAAWiE,KAAK,WAA7B,UACS,0BAAMjE,UAAU,WAAhB,eAGX,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWiE,KAAK,WAA7B,iBC1BlBZ,IAASkB,cCxBM,CACbC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBDiBjB,IAoBeC,EApBH,WAAO,IAAD,EACQtE,mBAAS,MADjB,mBACTX,EADS,KACHyD,EADG,KAGhB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,MACA,kBAAC5D,EAAYqF,SAAb,CAAsBxC,MAAO,CAAE1C,OAAMyD,YACnC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO0B,OAAK,EAACC,KAAK,IAAIC,UAAWvD,IACjC,kBAAC,IAAD,CAAOqD,OAAK,EAACC,KAAK,UAAUC,UAAWxB,IACvC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,UAAUC,UAAWtC,IACvC,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,MAGrC,kBAAC,EAAD,QE5BcsB,QACW,cAA7BC,OAAOlF,SAASmF,UAEe,UAA7BD,OAAOlF,SAASmF,UAEhBD,OAAOlF,SAASmF,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhF,MAAK,SAAAiF,GACJA,EAAaC,gBAEd/E,OAAM,SAAAgF,GACL9E,QAAQ8E,MAAMA,EAAMvD,c","file":"static/js/main.e0e65f5d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n","import React from \"react\";\r\n\r\nconst Usercard = ({ user }) => {\r\n  return (\r\n    <div className=\"card usercard\">\r\n      <img src={user.avatar_url} />\r\n      <div className=\"card-body\">\r\n        <div className=\"text-primary card-title\">\r\n          <h5>{user.name}</h5>\r\n        </div>\r\n        <div className=\"text-primary\">{user.location}</div>\r\n        <div className=\"text-primary\">\r\n          Email: {user.email ? user.email : \"\"}\r\n        </div>\r\n        <div className=\"text-info\">{user.bio}</div>\r\n        <div className=\"text-info\">\r\n          Followers: {user.followers ? user.followers : \"\"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Usercard;\r\n","import React from \"react\";\r\n\r\nimport Axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\n\r\nconst Repos = ({ repo_url }) => {\r\n  const [repos, setrepos] = useState([]);\r\n\r\n  const fetchRepo = () => {\r\n    Axios.get(repo_url)\r\n      .then((res) => {\r\n        const { data } = res;\r\n        setrepos(data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRepo();\r\n  }, [repo_url]);\r\n  return (\r\n    <ul>\r\n      {repos.map((item) => (\r\n        <li key={item.id}>\r\n          <div className=\"\">\r\n            <h6>{item.name}</h6>\r\n          </div>\r\n          <div className=\"lang\">{item.language}</div>\r\n          <div className=\"desc\">{item.description}</div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Repos;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport Axios from \"axios\";\r\n\r\nimport { toast } from \"react-toastify\";\r\nimport Usercard from \"../Components/usercard\";\r\nimport Repos from \"../Components/Repos\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst Home = () => {\r\n  const [gituser, setgitUser] = useState(null);\r\n  const [query, setquery] = useState(\"\");\r\n  const context = useContext(UserContext);\r\n  const fetchDetails = () => {\r\n    Axios.get(`https://api.github.com/users/${query}`)\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        setgitUser(data);\r\n      })\r\n      .catch((err) => {\r\n        toast(err.message, {\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n  if (context.user === null) {\r\n    return <Redirect to=\"/signup\" />;\r\n  } else {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6 usercol\">\r\n          <div>\r\n            <input\r\n              type=\"text\"\r\n              className=\"maininput\"\r\n              placeholder=\"provide user Name\"\r\n              onChange={(e) => {\r\n                setquery(e.target.value);\r\n              }}\r\n            />\r\n            <br />\r\n            <button className=\"btn btn-success\" onClick={fetchDetails}>\r\n              fetch User\r\n            </button>\r\n          </div>\r\n          <div className=\"userdiv\">\r\n            {gituser !== null ? <Usercard user={gituser} /> : \"null\"}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6 repocol\">\r\n          {gituser ? <Repos repo_url={gituser.repos_url} /> : \"No Repositories\"}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport { UserContext } from \"../context/UserContext\";\r\nimport { toast } from \"react-toastify\";\r\nimport firebase from \"firebase/app\";\r\nimport { Redirect } from \"react-router-dom\";\r\nconst SignIn = () => {\r\n  const context = useContext(UserContext);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setpassword] = useState(\"\");\r\n\r\n  const handelSignin = () => {\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((res) => {\r\n        context.setUser({\r\n          email: res.user.email,\r\n          uid: res.user.uid,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        toast(err.message, {\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    handelSignin();\r\n  };\r\n  if (context.user?.email) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <form onSubmit={handelSubmit}>\r\n        <div className=\"form-group\">\r\n          <label for=\"exampleInputEmail1\">Email address</label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            id=\"exampleInputEmail1\"\r\n            aria-describedby=\"emailHelp\"\r\n            onChange={(e) => {\r\n              setEmail(e.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label for=\"exampleInputPassword1\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            id=\"exampleInputPassword1\"\r\n            onChange={(e) => {\r\n              setpassword(e.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Sign In\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport firebase from \"firebase/app\";\r\nimport { UserContext } from \"../context/UserContext\";\r\n\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst SignUp = () => {\r\n  const context = useContext(UserContext);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setpassword] = useState(\"\");\r\n\r\n  const handelSignup = () => {\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((res) => {\r\n        console.log(res);\r\n        context.setUser({\r\n          email: res.user.email,\r\n          uid: res.user.uid,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n        toast(err, {\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    handelSignup();\r\n  };\r\n\r\n  if (context.user?.email) {\r\n    return <Redirect to=\"/\" />;\r\n  } else {\r\n    return (\r\n      <form onSubmit={handelSubmit}>\r\n        <div className=\"form-group\">\r\n          <label for=\"exampleInputEmail1\">Email address</label>\r\n          <input\r\n            type=\"email\"\r\n            className=\"form-control\"\r\n            id=\"exampleInputEmail1\"\r\n            aria-describedby=\"emailHelp\"\r\n            onChange={(e) => {\r\n              setEmail(e.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <label for=\"exampleInputPassword1\">Password</label>\r\n          <input\r\n            type=\"password\"\r\n            className=\"form-control\"\r\n            id=\"exampleInputPassword1\"\r\n            onChange={(e) => {\r\n              setpassword(e.target.value);\r\n            }}\r\n          ></input>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n};\r\n\r\nexport default SignUp;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div\r\n      className=\"container-fluid text-center bg-info fixed-bottom\"\r\n      id=\"footer\"\r\n    >\r\n      <p>MyApp Github search for a user</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React from \"react\";\r\n\r\nconst Notfound = () => {\r\n  return (\r\n    <div>\r\n      <h1>Notfound Page</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notfound;\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport { UserContext } from \"../context/UserContext\";\r\nconst Navbar = () => {\r\n  const context = useContext(UserContext);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"navbar navbar-expand-md navbar-light navbar-custom bg-info \">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          gitAPI\r\n        </a>\r\n\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-toggle=\"collapse\"\r\n          data-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        ></button>\r\n\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <span className=\"navbar-text \">\r\n            Welcome {context.user?.email ? context.user?.email : \"\"}\r\n          </span>\r\n          <ul className=\"navbar-nav ml-auto \">\r\n            {context.user ? (\r\n              <li className=\"nav-item\">\r\n                <a\r\n                  href=\"#\"\r\n                  onClick={() => {\r\n                    context.setUser(null);\r\n                  }}\r\n                  className=\"nav-link\"\r\n                >\r\n                  logout\r\n                </a>\r\n              </li>\r\n            ) : (\r\n              <>\r\n                <li className=\"nav-item  \">\r\n                  <a className=\"nav-link\" href=\"/signup\">\r\n                    signup <span className=\"sr-only\">(current)</span>\r\n                  </a>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link\" href=\"/signin\">\r\n                    Signin\r\n                  </a>\r\n                </li>\r\n              </>\r\n            )}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\n\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\n//components\n\nimport Home from \"./Pages/Home\";\nimport SignIn from \"./Pages/SignIn\";\nimport SignUp from \"./Pages/SignUp\";\nimport Footer from \"./Layout/footer\";\nimport { UserContext } from \"./context/UserContext\";\nimport Notfound from \"./Pages/notFound\";\nimport Navbar from \"./Layout/Navbar\";\n\nimport firebaseconfig from \"./config/firebaseconfig\";\n\nfirebase.initializeApp(firebaseconfig);\nconst App = () => {\n  const [user, setUser] = useState(null);\n\n  return (\n    <Router>\n      <ToastContainer />\n      <UserContext.Provider value={{ user, setUser }}>\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/signup\" component={SignUp} />\n          <Route exact path=\"/signin\" component={SignIn} />\n          <Route exact path=\"*\" component={Notfound} />\n        </Switch>\n      </UserContext.Provider>\n      <Footer />\n    </Router>\n  );\n};\n\nexport default App;\n","export default {\r\n  apiKey: \"AIzaSyBExIPHPUYsIjmDp-NszmJghMcuoEURN3A\",\r\n  authDomain: \"mygithubapp-a2274.firebaseapp.com\",\r\n  databaseURL: \"https://mygithubapp-a2274.firebaseio.com\",\r\n  projectId: \"mygithubapp-a2274\",\r\n  storageBucket: \"mygithubapp-a2274.appspot.com\",\r\n  messagingSenderId: \"352281280077\",\r\n  appId: \"1:352281280077:web:683dae5b4d112ce22aa604\",\r\n  measurementId: \"G-EDKQ6H7RKM\",\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}